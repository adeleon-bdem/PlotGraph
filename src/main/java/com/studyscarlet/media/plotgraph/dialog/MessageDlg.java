/*
 * Copyright (c) 2014, 2105; Estudio Escarlata. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 
 *   - Neither the name of Estudio Escarlata or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.studyscarlet.media.plotgraph.dialog;

import com.studyscarlet.media.plotgraph.dialog.enums.DEButtons;
import com.studyscarlet.media.plotgraph.dialog.enums.DEEvents;
import com.studyscarlet.media.plotgraph.dialog.enums.DEIcons;
import com.studyscarlet.media.plotgraph.dialog.enums.DEResults;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.EnumSet;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * com.studyscarlet.media.plotgraph.dialog.MessageDlg.
 * Esta enumeración representa...
 *
 * @author Angel Emilio de Le&oacute;n Guti&eacute;rrez (adeleon.bdem@gmail.com)
 * @version 1.0
 * @since 1.0
 */
public class MessageDlg extends javax.swing.JDialog implements ActionListener {
    
    /**
     * Para el serializado
     */
    private static final long serialVersionUID = -834707823073262985L;

    /**
     * Para el logger.
     */
    private final Logger logger = LoggerFactory.getLogger(MessageDlg.class);
    
    /**
     * Para el resultado.
     */
    private DEResults result;
    
    /**
     * Creates new form MessageDlg
     * @param parent El marco en el que se despliega el dialogo
     * @param modal
     * @param message
     * @param buttons
     * @param titulo
     * @param icon
     */
    public MessageDlg(JFrame parent, boolean modal, 
            String message, Set<DEButtons> buttons, String titulo,
            DEIcons icon) {
        super(parent, modal);
        initComponents();
        // crear las variantes
        // logger.debug("Creando MessageDlg con botones: {} e icono {}", buttons, icon);
        //// Ahora el resto de los parámetros
        if (buttons==null || buttons.isEmpty()) {
            buttons = (EnumSet<DEButtons>)EnumSet.of(DEButtons.DLG_ACCEPT);
        }
        if (titulo==null || titulo.length() == 0) {
            titulo = "Informacion";
        }
        if (icon == null) {
            icon = DEIcons.DLG_INFORMATION;
        }
        // El mensaje en si
        jTxtMessage.setText(message);
        // La imagen del icono.
        jLblIcon.setIcon(
                new ImageIcon(
                        MessageDlg.class.getResource(icon.getValue())));
        // El título del diálogo
        setTitle(titulo);
        // los botones
        jBtnAceptar.setVisible(buttons.contains(DEButtons.DLG_ACCEPT));
        jBtnCancelar.setVisible(buttons.contains(DEButtons.DLG_CANCEL));
        jBtnIgnorar.setVisible(buttons.contains(DEButtons.DLG_IGNORE));
        // agregar los listeners.
        addListeners(this);        
    }

    /**
     * Getter para el resultado obtenido.
     * @return El resultado obtenido.
     */
    public DEResults getResult() {
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanMensaje = new javax.swing.JPanel();
        jLblIcon = new javax.swing.JLabel();
        jScrMessage = new javax.swing.JScrollPane();
        jTxtMessage = new javax.swing.JTextArea();
        jPanBotones = new javax.swing.JPanel();
        jBtnAceptar = new javax.swing.JButton();
        jBtnCancelar = new javax.swing.JButton();
        jBtnIgnorar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Información");

        jPanMensaje.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/studyscarlet/media/plotgraph/icons/msgInformation_32.png"))); // NOI18N

        jTxtMessage.setEditable(false);
        jTxtMessage.setColumns(20);
        jTxtMessage.setLineWrap(true);
        jTxtMessage.setRows(5);
        jScrMessage.setViewportView(jTxtMessage);

        javax.swing.GroupLayout jPanMensajeLayout = new javax.swing.GroupLayout(jPanMensaje);
        jPanMensaje.setLayout(jPanMensajeLayout);
        jPanMensajeLayout.setHorizontalGroup(
            jPanMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanMensajeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblIcon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanMensajeLayout.setVerticalGroup(
            jPanMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanMensajeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addGroup(jPanMensajeLayout.createSequentialGroup()
                        .addComponent(jLblIcon)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        getContentPane().add(jPanMensaje, java.awt.BorderLayout.CENTER);

        jPanBotones.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanBotones.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        jBtnAceptar.setMnemonic('A');
        jBtnAceptar.setText("Aceptar");
        jBtnAceptar.setActionCommand(DEEvents.DLG_EV_ACCEPT.getEvent());
        jPanBotones.add(jBtnAceptar);

        jBtnCancelar.setMnemonic('C');
        jBtnCancelar.setText("Cancelar");
        jBtnCancelar.setActionCommand(DEEvents.DLG_EV_CANCEL.getEvent());
        jPanBotones.add(jBtnCancelar);

        jBtnIgnorar.setMnemonic('I');
        jBtnIgnorar.setText("Ignorar");
        jBtnIgnorar.setActionCommand(DEEvents.DLG_EV_IGNORE.getEvent());
        jPanBotones.add(jBtnIgnorar);

        getContentPane().add(jPanBotones, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAceptar;
    private javax.swing.JButton jBtnCancelar;
    private javax.swing.JButton jBtnIgnorar;
    private javax.swing.JLabel jLblIcon;
    private javax.swing.JPanel jPanBotones;
    private javax.swing.JPanel jPanMensaje;
    private javax.swing.JScrollPane jScrMessage;
    private javax.swing.JTextArea jTxtMessage;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para indicar un listener de eventos
     * @param listener 
     */
    public final void addListeners(ActionListener listener) {
        jBtnAceptar.addActionListener(listener);
        jBtnCancelar.addActionListener(listener);
        jBtnIgnorar.addActionListener(listener);
    }
    
    @Override
    public void actionPerformed(ActionEvent event) {
        String stringCommand = event.getActionCommand();        
        DEEvents eventCommand = DEEvents.getEnumFromString(stringCommand);
        
        switch (eventCommand) {
            case DLG_EV_ACCEPT:
            case DLG_EV_CANCEL:
            case DLG_EV_IGNORE:
                result = eventCommand.getValue();
                break;
            case DLG_EV_UNKNOWN:
                result = DEEvents.DLG_EV_UNKNOWN.getValue();
                break;
            default:
                // el caso default es desconocido.
                logger.error("Evento superdesconocido: {}", eventCommand);
                return;
        }
        // por default, se oculta el diálogo...
        this.dispose();
    }
    
    /**
     * Método para mostrar un diálogo y obtener el resultado
     * @param parent El <code>JFrame</code> padre de este diálogo. 
     * Puede ser <code>null</code>.
     * @param owner El componente en donde se centrará este diálogo.
     * Si es nulo y el padre no lo es, se busca centrar en el padre.
     * @param modal
     * @param message
     * @param buttons
     * @param titulo
     * @param icon
     * @return 
     */
    public static DEResults showMessageDlg(JFrame parent, JComponent owner, 
            boolean modal, String message, Set<DEButtons> buttons, 
            String titulo, DEIcons icon) {
        // construir un dialogo...
        MessageDlg dialog = new MessageDlg(parent, modal, message, buttons, titulo, icon);
        // mostrarlo.
        dialog.pack();
        dialog.setLocationRelativeTo(owner);
        dialog.setVisible(true);
        // esperar a que termine el dialgo.
        return dialog.getResult();
    }
    
}
